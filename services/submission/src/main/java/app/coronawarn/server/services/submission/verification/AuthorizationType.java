package app.coronawarn.server.services.submission.verification;

import java.util.stream.Stream;

/**
 * The Authorization Types define the available authorization methods & syntax. This type depends on the actual type,
 * and the attached authorization key.<br>
 *
 * <ol>
 * <li>TAN: This TAN is generated by the Verification Server upon successful validation of a
 * COVID-19 positive test. This TAN is transferred to the mobile app, which will then in turn use
 * this TAN for getting authorization on uploading the diagnosis keys.</li>
 * <li>TELETAN: This TAN will be issued by the Health Authority over the phone. The affected
 * patient needs to enter this TELETAN in the mobile app when uploading the diagnosis keys.</li>
 * </ol>
 */
public enum AuthorizationType {

  /**
   * A TAN generated by the verification server, transferred app to app.
   */
  TAN("TAN") {
    @Override
    public boolean isValidSyntax(String authKey) {
      return true;
    }
  },
  /**
   * A TELETAN, generated by the Health Authority and handed over to the patient over the phone.
   */
  TELETAN("TELETAN") {
    @Override
    public boolean isValidSyntax(String authKey) {
      return true;
    }
  };

  private String protocolConstant;

  AuthorizationType(String protocolConstant) {
    this.protocolConstant = protocolConstant;
  }

  /**
   * Creates a new Authorization Type instance based on the given string value. If the value matches the enums protocol
   * constant (used in the CWA-Authorization header), it will return the correct enum value. If the string could not be
   * matched, will throw an exception instead.
   *
   * @param value The value to use for creating the enum value.
   * @return the matching authorization type
   * @throws IllegalArgumentException in case the given string value does not match any {@link
   *                                  AuthorizationType#protocolConstant}.
   */
  public static AuthorizationType from(String value) {
    return Stream.of(AuthorizationType.values())
        .filter(authType -> authType.protocolConstant.equals(value))
        .findAny()
        .orElseThrow(() -> new IllegalArgumentException("Given " + value + " is not supported."));
  }

  /**
   * Checks whether the given TAN key is valid for this authorization type.
   *
   * @param authKey the TAN key, e.g. "AB88XX3Z"
   * @return true, in case it is a well formed TAN for this authorization type. This does not necessarily mean, that the
   *     TAN is valid.
   */
  public abstract boolean isValidSyntax(String authKey);

}
